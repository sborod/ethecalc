{"version":3,"sources":["lib/calculator_string_checker.js","lib/string_to_request_encoder.js","App.js","serviceWorker.js","index.js"],"names":["CalculatorStringChecker","str","test","two_operators_in_a_row","minus_after_multi_or_division","this","_sanity_empty_string","_sanity_remove_trailing_zeroes","charAt","length","substr","StringToRequestEncoder","uri","str_to_uri","fetch","then","res","json","action","param1","param2","includes","_str$split","split","_str$split2","Object","slicedToArray","_str$split3","_str$split4","_str$split5","_str$split6","_str$split7","_str$split8","concat","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","stringChecker","state","text","last_operation_str","handleChange","bind","assertThisInitialized","handleSubmit","handleClear","react_default","a","createElement","className","onClick","id","autoFocus","onChange","value","autoComplete","type","href","target","e","sanity","check_on_input","setState","preventDefault","check_on_handle","stringToRequestEncoder","that","encode_and_request","resp","result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.598a16b4.chunk.js","sourcesContent":["export default class CalculatorStringChecker {\r\n    check_on_input(str) {\r\n        let contain_only_digits_and_operators = /^[\\d\\+\\-\\*\\/\\.]+$/.test(str);\r\n        if (!contain_only_digits_and_operators) return false;\r\n\r\n        let two_operators_in_a_row = /[\\+\\-\\*\\/\\.][\\+\\-\\*\\/\\.]$/.test(str);\r\n        let minus_after_multi_or_division = /[\\*\\/]\\-$/.test(str);\r\n        if (two_operators_in_a_row && !minus_after_multi_or_division) return false;\r\n\r\n        let starts_from_operator = /^[\\+\\*\\/]/.test(str);\r\n        if (starts_from_operator) return false;\r\n\r\n        let contain_more_than_3_digits_after_point = /\\.\\d{3}\\d+$/.test(str);\r\n        if (contain_more_than_3_digits_after_point) return false;\r\n\r\n        let contain_more_than_12_digits_before_point = /[^\\.]\\d{12}$/.test(str);\r\n        if (contain_more_than_12_digits_before_point) return false;\r\n\r\n        let contain_two_points = /\\d+\\.\\d+\\.$/.test(str);\r\n        if (contain_two_points) return false;\r\n\r\n        let contain_two_or_more_operators = /^[\\d\\.]+[\\+\\-\\*\\/][\\d\\.]+[\\+\\-\\*\\/]/.test(str);\r\n        if (contain_two_or_more_operators) return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    check_on_handle(str) {\r\n        let contain_operator = /^[\\d\\.]+[\\+\\-\\*\\/]+[\\d\\.]+$/.test(str)\r\n        if (!contain_operator) return false;\r\n\r\n        let division_on_0 = /\\/0$/.test(str);\r\n        if (division_on_0) return false;\r\n\r\n        let ends_with_point = /\\.$/.test(str);\r\n        if (ends_with_point) return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    sanity(str) {\r\n        str = this._sanity_empty_string(str)\r\n        str = this._sanity_remove_trailing_zeroes(str)\r\n\r\n        return str;\r\n    }\r\n\r\n    _sanity_remove_trailing_zeroes(str) {\r\n        if ( str.charAt(0) === \"0\" && str.length > 1 && str.charAt(1) !== \".\" ) {\r\n            str = str.substr(1);\r\n        }\r\n        return str\r\n    }\r\n\r\n    _sanity_empty_string(str) {\r\n        if ( str === \"\" ) {\r\n            str = \"0\";\r\n        }\r\n        return str;\r\n    }\r\n}","export default class StringToRequestEncoder {\r\n    encode_and_request(str) {\r\n        let uri = this.str_to_uri(str)\r\n        if (!uri) {\r\n            return null\r\n        }\r\n        return fetch(uri).then( res => res.json() )\r\n    }\r\n\r\n    str_to_uri(str) {\r\n        var action, param1, param2;\r\n\r\n        if ( str.includes(\"*\") ) {\r\n            action = \"multiply\";\r\n            [param1, param2] = str.split(\"*\");\r\n        } else if ( str.includes(\"/\") ) {\r\n            action = \"divide\";\r\n            [param1, param2] = str.split(\"/\");\r\n        } else if ( str.includes(\"+\") ) {\r\n            action = \"add\";\r\n            [param1, param2] = str.split(\"+\");\r\n        } else if ( str.includes(\"-\") ) {\r\n            action = \"subtract\";\r\n            [param1, param2] = str.split(\"-\");\r\n        }\r\n        \r\n        let uri = `http://localhost:3000/calculator_actions/${action}/${param1}/${param2}`\r\n\r\n        return uri\r\n    }\r\n}","import React, { Component } from 'react';\nimport CalculatorStringChecker from './lib/calculator_string_checker.js';\nimport StringToRequestEncoder from './lib/string_to_request_encoder.js';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.stringChecker = new CalculatorStringChecker();\n\n    this.state = {\n      text: '0',\n      last_operation_str: 'Enter first operation:'\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleClear = this.handleClear.bind(this);\n  }\n\n  render() {\n    return (\n      <div className=\"CalculatorWrapper\">\n        <h3>Simple Calculator based on Ethereum Blockchain</h3>\n        <form onClick={this.handleSubmit}>\n          <div className=\"inputWrapper\">\n            <div className=\"last_operation\">\n              {this.state.last_operation_str}\n            </div>\n            <input\n              id=\"calculator-input\"\n              autoFocus\n              onChange={this.handleChange}\n              value={this.state.text}\n              autoComplete=\"off\"\n            />\n          </div>\n          <div className=\"buttonsWrapper\">\n            <div onClick={this.handleClear} className=\"buttonWrapper\">\n              <button type=\"button\">C</button>\n            </div>\n            <div className=\"buttonWrapper\">\n              <button>=</button>\n            </div>\n          </div>\n        </form>\n        <h3>Features:</h3>\n        <ul>\n          <li>can do simple operations such as <b>+</b>, <b>-</b>, <b>*</b>, <b>/</b></li>\n          <li>\n            all calculations are done on the <a href=\"https://ropsten.etherscan.io/address/0x6eab7a2d1f06dceca1bfe23788f4d0152f356f45\" target=\"_blank\">\n              contract\n            </a> with <a href =\"/SimpleCalculator.sol\" target=\"_blank\">\n              source code\n            </a> located in Ropsten test network via Infura API\n          </li>\n          <li>\n            numbers are limited by 3 digits after a point, and can contain only 12 digits before\n          </li>\n          <li>\n            operations history is not saved in blockchain yet\n          </li>\n          <li>Front-end based on React</li>\n          <li>Back-end based on Node.js</li>\n        </ul>\n        <div>Author: Sergey Borodanov</div>\n        <div>Last update: March 23, 2019</div>\n      </div>\n    );\n  }\n\n  handleChange(e) {\n    e.target.value = this.stringChecker.sanity(e.target.value)\n\n    if ( this.stringChecker.check_on_input(e.target.value) ) {\n      this.setState({ text: e.target.value });\n    }\n  }\n\n  handleClear(e) {\n    e.preventDefault();\n\n    this.setState( () => ({\n      text: '0'\n    }));\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    if ( this.state.text === \"0\" ) {\n      return null;\n    }\n\n    if ( /\\/0$/.test(this.state.text) ) {\n      this.setState((state) => ({\n        last_operation_str: state.text,\n        text: \"Infinity\"\n      }));\n      return null;\n    }\n\n    if ( !this.stringChecker.check_on_handle(this.state.text) ) {\n      return null;\n    }\n\n    let stringToRequestEncoder = new StringToRequestEncoder()\n    let that = this;\n    stringToRequestEncoder.encode_and_request(this.state.text)\n      .then(function (resp) {\n        that.setState( (state) => ({\n          last_operation_str: state.text,\n          text: resp.result\n        }));\n      })\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}